{"version":3,"sources":["webpack:///./src/components/BasicShop/BasicComponents/Form/baseForm.less","webpack:///./src/components/BasicShop/BasicComponents/Form/BaseForm.tsx"],"names":["BaseForm","Text","props","label","placeholder","onChange","Textarea","Number","MyRadio","options","styles","radioWrap","radioTitle","map","item","i","value","radioItem","MyCheckbox","Date","useState","setValue","handleChange","v","formatTime","MySelect","MyTextTip","color","fontSize"],"mappings":"+EACA,EAAO,QAAU,CAAC,UAAY,oBAAoB,WAAa,qBAAqB,UAAY,sB,2WCoB1FA,EAAsB,CAC1BC,KAAOC,IAA2E,GACxEC,GAAiCD,EAAjCC,MAAOC,EAA0BF,EAA1BE,YAAaC,EAAaH,EAAbG,SAC5B,MACE,wBAAM,MAAOF,GACX,uBAAO,UAAS,GAAC,KAAK,OAAO,YAAaC,EAAa,SAAUC,MAIvEC,SAAWJ,IAA+E,GAChFC,GAAiCD,EAAjCC,MAAOC,EAA0BF,EAA1BE,YAAaC,EAAaH,EAAbG,SAC5B,MACE,wBAAM,MAAOF,GACX,uBACE,KAAK,OACL,KAAM,EACN,WAAU,GACV,WAAU,GACV,YAAaC,EACb,SAAUC,MAKlBE,OAASL,IAAsF,GACrFC,GAAiCD,EAAjCC,MAAOC,EAA0BF,EAA1BE,YAAaC,EAAaH,EAAbG,SAC5B,MACE,wBAAM,MAAOF,GACX,uBAAO,KAAK,SAAS,YAAaC,EAAa,SAAUC,MAI/DG,QAAUN,IAAuF,GACvFC,GAA6BD,EAA7BC,MAAOM,EAAsBP,EAAtBO,QAASJ,EAAaH,EAAbG,SACxB,MACE,0BAAK,UAAWK,IAAOC,WACrB,yBAAK,UAAWD,IAAOE,YAAaT,GACpC,2BACE,sBAAO,MAAP,CAAa,SAAUE,GACpBI,EAAQI,IAAI,CAACC,EAAMC,IAEhB,uBAAO,MAAOD,EAAKE,MAAO,IAAKD,EAAG,UAAWL,IAAOO,WACjDH,EAAKX,YAStBe,WACEhB,IACG,GACKC,GAA6BD,EAA7BC,MAAOM,EAAsBP,EAAtBO,QAASJ,EAAaH,EAAbG,SACxB,MACE,0BAAK,UAAWK,IAAOC,WACrB,yBAAK,UAAWD,IAAOE,YAAaT,GACpC,2BACE,sBAAU,MAAV,CAAgB,SAAUE,GACvBI,EAAQI,IAAI,CAACC,EAAMC,IAEhB,uBAAU,MAAOD,EAAKE,MAAO,IAAKD,EAAG,UAAWL,IAAOO,WACpDH,EAAKX,YAStBgB,KAAM,SAAF,qGAAGjB,IAA6D,GAC1DC,GAAiCD,EAAjCC,MAAOC,EAA0BF,EAA1BE,YAAaC,EAAaH,EAAbG,SADsC,EAExCe,SAAc,IAF0B,mBAE3DJ,EAF2D,KAEpDK,EAFoD,KAG5DC,EAAgBC,IACpBF,EAASE,GACTlB,GAAYA,EAASmB,YAAW,aAAcD,KAEhD,MACE,wBAAM,MAAOpB,GACX,uBACE,YAAaC,EACb,KAAK,OACL,IAAI,aACJ,IAAI,aACJ,MAAOY,EACP,KAAMM,OAKdG,SACEvB,IACG,GACKC,GAA6BD,EAA7BC,MAAOM,EAAsBP,EAAtBO,QAASJ,EAAaH,EAAbG,SACxB,MACE,wBAAM,MAAOF,GACX,uBAAQ,WAAYM,EAAS,KAAMJ,MAIzCqB,UAAYxB,IAA8B,GAChCC,GAA2BD,EAA3BC,MAAOwB,EAAoBzB,EAApByB,MAAOC,EAAa1B,EAAb0B,SACtB,MAAO,wBAAM,MAAO,yBAAK,MAAO,CAAED,QAAOC,aAAazB,OAI3CH","file":"61.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"radioWrap\":\"radioWrap___V9Ujm\",\"radioTitle\":\"radioTitle___2yRMA\",\"radioItem\":\"radioItem___QPf2q\"};","import { Input, Cell, DateSelect, Radio, Select, Checkbox } from 'zarm';\nimport styles from './baseForm.less';\nimport React, { ReactText } from 'react';\nimport {\n  baseFormDateTpl,\n  baseFormMyRadioTpl,\n  baseFormMyCheckboxTpl,\n  baseFormMySelectTpl,\n  baseFormNumberTpl,\n  baseFormTextAreaTpl,\n  baseFormTextTpl,\n  baseFormTextTipTpl,\n  baseFormUnionType,\n} from '@/components/PanelComponents/FormEditor/types';\nimport { formatTime } from '@/utils/tool';\n// 维护表单控件， 提高form渲染性能\n\ntype TBaseForm = {\n  [key in baseFormUnionType]: any;\n};\n\nconst BaseForm: TBaseForm = {\n  Text: (props: baseFormTextTpl & { onChange: (v: string | undefined) => void }) => {\n    const { label, placeholder, onChange } = props;\n    return (\n      <Cell title={label}>\n        <Input clearable type=\"text\" placeholder={placeholder} onChange={onChange} />\n      </Cell>\n    );\n  },\n  Textarea: (props: baseFormTextAreaTpl & { onChange: (v: string | undefined) => void }) => {\n    const { label, placeholder, onChange } = props;\n    return (\n      <Cell title={label}>\n        <Input\n          type=\"text\"\n          rows={3}\n          autoHeight\n          showLength\n          placeholder={placeholder}\n          onChange={onChange}\n        />\n      </Cell>\n    );\n  },\n  Number: (props: baseFormNumberTpl & { onChange: (v: string | undefined | number) => void }) => {\n    const { label, placeholder, onChange } = props;\n    return (\n      <Cell title={label}>\n        <Input type=\"number\" placeholder={placeholder} onChange={onChange} />\n      </Cell>\n    );\n  },\n  MyRadio: (props: baseFormMyRadioTpl & { onChange: (v: string | undefined | number) => void }) => {\n    const { label, options, onChange } = props;\n    return (\n      <div className={styles.radioWrap}>\n        <div className={styles.radioTitle}>{label}</div>\n        <Cell>\n          <Radio.Group onChange={onChange}>\n            {options.map((item, i) => {\n              return (\n                <Radio value={item.value} key={i} className={styles.radioItem}>\n                  {item.label}\n                </Radio>\n              );\n            })}\n          </Radio.Group>\n        </Cell>\n      </div>\n    );\n  },\n  MyCheckbox: (\n    props: baseFormMyCheckboxTpl & { onChange: (v: Array<ReactText> | undefined) => void },\n  ) => {\n    const { label, options, onChange } = props;\n    return (\n      <div className={styles.radioWrap}>\n        <div className={styles.radioTitle}>{label}</div>\n        <Cell>\n          <Checkbox.Group onChange={onChange}>\n            {options.map((item, i) => {\n              return (\n                <Checkbox value={item.value} key={i} className={styles.radioItem}>\n                  {item.label}\n                </Checkbox>\n              );\n            })}\n          </Checkbox.Group>\n        </Cell>\n      </div>\n    );\n  },\n  Date: (props: baseFormDateTpl & { onChange: (v: Date) => void }) => {\n    const { label, placeholder, onChange } = props;\n    const [value, setValue] = useState<any>('');\n    const handleChange = (v: any) => {\n      setValue(v);\n      onChange && onChange(formatTime('yyyy-MM-dd', v));\n    };\n    return (\n      <Cell title={label}>\n        <DateSelect\n          placeholder={placeholder}\n          mode=\"date\"\n          min=\"1949-05-15\"\n          max=\"2100-05-15\"\n          value={value}\n          onOk={handleChange}\n        />\n      </Cell>\n    );\n  },\n  MySelect: (\n    props: baseFormMySelectTpl & { onChange: ((v: Record<string, any>) => void) | undefined },\n  ) => {\n    const { label, options, onChange } = props;\n    return (\n      <Cell title={label}>\n        <Select dataSource={options} onOk={onChange} />\n      </Cell>\n    );\n  },\n  MyTextTip: (props: baseFormTextTipTpl) => {\n    const { label, color, fontSize } = props;\n    return <Cell title={<div style={{ color, fontSize }}>{label}</div>}></Cell>;\n  },\n};\n\nexport default BaseForm;\n"],"sourceRoot":""}